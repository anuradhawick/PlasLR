#!/usr/bin/python3
import argparse
import os
import sys
import time
import logging

from plaslr_utils import reads_filter
from plaslr_utils import plaslr_core
from plaslr_utils import scan_dsk

logger = logging.getLogger('PlasLR')
logger.setLevel(logging.DEBUG)

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
consoleHeader = logging.StreamHandler()
consoleHeader.setFormatter(formatter)
consoleHeader.setLevel(logging.INFO)
logger.addHandler(consoleHeader)


start_time = time.time()
parser = argparse.ArgumentParser(description="""PlasLR Plasmid Classification Corrector""")

parser.add_argument('--reads', '-r',
                    help="Reads path (FASTQ)",
                    type=str,
                    required=True)
parser.add_argument('--threads', '-t',
                    help="Thread limit",
                    type=int,
                    default=8,
                    required=False)
parser.add_argument('--ground-truth', '-g',
                    help="Read ids of reads (For dry runs with ground truth)",
                    type=str,
                    required=False,
                    default=None)   
parser.add_argument('--bin-width', '-bw',
                    help="Value of bw*bs will be the total coverage of k-mers in the coverage histograms. \
                        Usually k-mers are shifted towards y-axis due to errors. By defaul b=2; coverages upto 400X",
                    type=int,
                    required=False,
                    default=2)    
parser.add_argument('--bin-coverage', '-bc',
                    metavar='<number of bins for coverage histograms>',
                    help="Value of bw*bs will be the total coverage of k-mers in the coverage histograms. \
                        Usually k-mers are shifted towards y-axis due to errors. By defaul bc=200; coverages upto 400X",
                    type=int,
                    required=False,
                    default=200)              
parser.add_argument('--max-mem', '-m',
                    metavar='<Max memory for DSK in Mb>',
                    help="Default 5000. DSK k-mer counter accepts a max memory parameter. However, the complete pipeline requires 5GB+ RAM. \
                        This is only to make DSK step faster, should you have more RAM.",
                    type=int,
                    required=False,
                    default=5000)                                                
parser.add_argument('--resume',
                    action='store_true',
                    help='Continue from the last step or the binning step (which ever comes first). Can save time needed to run DSK and obtain k-mers. Ideal for sensitivity tuning'
                    )                       
parser.add_argument('--plasflow', '-pf',
                    metavar='',
                    help="PlasFlow result tsv",
                    type=str,
                    default=None,
                    required=False)
parser.add_argument('--plasclass', '-pc',
                    metavar='',
                    help="PlasClass result",
                    type=str,
                    default=None,
                    required=False)
parser.add_argument('--prob-chrom', '-C',
                    help="Chromosome [Default Auto Detected for plasclass and 0.5 for plasflow]",
                    type=float,
                    default=None,
                    required=False)
parser.add_argument('--prob-plas', '-P',
                    metavar='',
                    help="Plasmid Threshold [Default Auto Detected for plasclass and 0.7 for plasflow]",
                    type=str,
                    default=None,
                    required=False)
parser.add_argument('--plots',
                    action='store_true',
                    help="Whether the initial classifications to be corrected or classify based on already labelled ones")
parser.add_argument('--output', '-o', help="Output directory", type=str, required=True)

args = parser.parse_args()

reads_path = args.reads
output = args.output
resume = args.resume
bin_width = args.bin_width
bin_coverage = args.bin_coverage
max_ram = max(args.max_mem, 5000)
classification = args.plasflow
truth = args.ground_truth
threads = args.threads
prob_plas = args.prob_plas
prob_chrom = args.prob_chrom
plots = args.plots

checkpointsPath = output + "/checkpoints"

# parameter checking
if not (prob_plas==None and prob_chrom==None) and (prob_plas!=None or prob_chrom!=None):
    logger.error("In manual mode both prob_plas and prob_chrom must be specified")
    logger.error("Please consider leaving the values for automatic thrshold setting")
    logger.error("Program exitting")
    sys.exit(1)

if args.plasclass != None and args.plasflow != None:
    logger.error("Must provide only one of -pf or -pc as the input")
    logger.error("Program exitting")
    sys.exit(1)

if classification == None:
    classification = args.plasclass

if classification == None:
    logger.error("Must provide either -pf or -pc as the input")
    logger.error("Program exitting")
    sys.exit(1)

def updateCheckpoints(newChecks):
    with open(checkpointsPath, "w+") as f:
        f.write(str(newChecks))

def loadCheckpoints():
    if not os.path.isfile(checkpointsPath):
        logger.error("No checkpoints from previous runs available")
        return False
    else:
        with open(checkpointsPath, "r") as f:
            lines = f.read().strip().split("\n")
            data = eval(lines[0])

            return data

# Validation of inputs
if threads <= 0:
    logger.error("Minimum number of threads is 1. Using thread count 1 and continue")
    threads = 1

if not os.path.isfile(reads_path):
    logger.error("Failed to open reads file")
    logger.error("Exitting process. Good Bye!")
    sys.exit(1)

if truth and not os.path.isfile(truth):
    logger.error("Failed to open read ids. Continue without ids")
    truth = None

if not os.path.exists(output):
    os.makedirs(output)

if not reads_path.split(".")[-1].lower() in ['fq', 'fasta', 'fa', 'fastq']:
    logger.error("Unable to detect file type of reads. Please use either FASTA of FASTQ. Good Bye!")
    sys.exit(1)

def checkProc(ret, n=None):
    if ret != 0:
        if n: logger.error("Error in step:", n)
        logger.error("Failed due to an error. Please check the log. Good Bye!")
        sys.exit(ret)

if resume:
    data = loadCheckpoints()

    if not data:
        resume = False

if not resume:
    data = {}
    data['r'] = reads_path
    data['o'] = output
    data['t'] = threads
    data['i'] = truth
    data['completed'] = set()

    updateCheckpoints(data)

fileHandler = logging.FileHandler(f"{output}/plaslr.log")
fileHandler.setLevel(logging.DEBUG)
fileHandler.setFormatter(formatter)
logger.addHandler(fileHandler)

if resume and "filtering" not in data['completed'] or not resume:
    # convert reads to filtered fasta
    logger.info("Filtering reads")
    try:
        reads_filter.filter_reads(reads_path, output, plasflow_path=args.plasflow, plasclass_path=args.plasclass, ground_truth_path=args.ground_truth)
    except Exception as e:
        logger.error("Failed to filter the reads. Ensure all the paths are correct", e)
        sys.exit(1)
    logger.info("Filtering completed")
    
    data['completed'].add('filtering')
    updateCheckpoints(data)

if resume and "dsk" not in data['completed'] or not resume:
    logger.info("Running DSK")
    cmdDSK = """dsk -verbose 0 -file "{0}/filtered.fasta" -kmer-size 15 -abundance-min 5 -out-dir "{0}/DSK" -max-memory {1} -nb-cores {2}""".format(output, max_ram, threads)
    o = os.system(cmdDSK)
    checkProc(o, "Running DSK")

    logger.info("Running DSK completed")

    logger.info("DSK postprocessing")
    scan_dsk.scan_dsk(f"{output}/DSK/filtered.h5", threads, f"{output}/DSK")
    logger.info("DSK postprocessing completed")

    data['completed'].add('dsk')
    updateCheckpoints(data)

if resume and "trimers" not in data['completed'] or not resume:
    logger.info("Counting trimers")
    checkProc(o, "Making directory for profiles")

    cmd = """"{0}/bin/countTrimers" "{1}/filtered.fasta" "{1}/3mers" {2}""".format(os.path.dirname(__file__), output, threads)
    o = os.system(cmd)
    checkProc(o, "Counting trimers")

    logger.info("Counting trimers completed")

    data['completed'].add('trimers')
    updateCheckpoints(data)

if resume and "15mers" not in data['completed'] or not resume:
    logger.info("Counting 15-mer profiles")
    cmd = """"{0}/bin/search15mers" "{1}/DSK/15mersCounts" "{1}/filtered.fasta" "{1}/15mers" 15 {2} {3} {4}""".format(os.path.dirname(__file__), output, bin_width, bin_coverage, threads)
    o = os.system(cmd)
    checkProc(o, "Counting 15-mer profiles")

    logger.info("Counting 15-mer profiles completed")

    data['completed'].add('15mers')
    updateCheckpoints(data)


logger.info("Correcting Plasmid Classification")

p3 = f"{output}/3mers"
p15 = f"{output}/15mers"
if truth:
    truth = f"{output}/filtered.truth.txt"
readIds = f"{output}/filtered.ids.txt"
kmer_counts = f"{output}/DSK/15mersCounts"

if args.plasclass:
    pc = f"{output}/filtered.pc"
    pf = None
else:
    pc = None
    pf = f"{output}/filtered.pf"

try:
    plaslr_core.run_plasmid_correction(p3, p15, readIds, kmer_counts, output, threads=threads, truth=truth, prob_plas=prob_plas, prob_chrom=prob_plas, plasclass=pc, plasflow=pf, plots=plots)
except Exception as e:
    logger.error("Failed to execute PlasLR core!", e)
    sys.exit(1)

end_time = time.time()
time_taken = end_time - start_time
logger.info("Program Finished!. Please find the output in final.txt")
logger.info(f"Total time consumed = {time_taken:10.2f} seconds")

logger.removeHandler(fileHandler)
logger.removeHandler(consoleHeader)
